@page "/nushagak river"
@using RiverCsvReader.Models;
@using System.Globalization;
@using System.Text;
@using System.Web;
@inject HttpClient Http

<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

<h3>Nushagak River</h3>

<p>Map of the nushagak river</p>

<div id="map"></div>

<p></p>

<p> The 280 mile long Nushagak River is located in South West Alaska, emptying into Bristol Bay. The river starts in the Alaska Range, flowing downstream of the formerly proposed site of the Pebble Mine. The river supports a thriving run of sockeye, pink, king, and coho salmon every year and supports the Bristol Bay fisheries. 
</p>

<script>
  (g=>
  {var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))
  }
  )
  ({
    key: "AIzaSyA7ulU8xvpqjIPoAy4erd4glaNmvnvLnRw",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });

</script>


<script>

async function initMap() {
  let map;
  
  const position = { lat: 58.7994, lng: -158.6325 };
  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

  map = new Map(document.getElementById("map"), {
    center: { lat: 58.7994, lng: -158.6325 },
    zoom: 6,
    mapId: "Salmon Finder",
  });

  const marker = new AdvancedMarkerElement({
    map: map,
    position: position,
    title: "Alaska",
  });

}

initMap(); 

</script>

<h3>Salmon Data</h3>

<table>
    <tr> 
        <th>Name</th>
        <th>Date</th>
        <th>Population</th>
    </tr>
    @foreach (var item in listOfRivers.Where (i => i.Name == "Naknek River"))
    {
      <tr>
        <td>@item.Name</td>
        <td>@item.Date</td>
        <td>@item.Population</td>
      </tr>
    }
</table>
@code {
 List<River> listOfRivers = new List<River>();

protected override async Task OnInitializedAsync()
    {
        string csvRivers = await Http.GetStringAsync("http://localhost:5000/sample-data/Salmon Fish Data - Alaska.csv");
        List<string> riversRows = csvRivers.Split("\n").ToList();
        for (int i = 0; i < riversRows.Count; i++)
        {
            if (i > 0) // Ignore 1st row which is column headers
            {
                 List<string> riverStringList = riversRows[i].Split(",").ToList();
                 
                 River river = new River(
                     riverStringList[0],
                     int.Parse(riverStringList[1]),
                     int.Parse(riverStringList[2])
                 );
                listOfRivers.Add(river);
            }
        }
    }
}