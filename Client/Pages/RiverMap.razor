@page "/map"
@using RiverCsvReader.Models;
@using System.Globalization;
@using System.Text;
@using System.Web;
@inject HttpClient Http

<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

<h3>Overall Map</h3>

<p>This is where we'll put the big map!</p>

<div id="map"></div>

<p>the map is above</p>

<script>
  (g=>
  {var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))
  }
  )
  ({
    key: "AIzaSyA7ulU8xvpqjIPoAy4erd4glaNmvnvLnRw",
    v: "weekly",
    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
    // Add other bootstrap parameters as needed, using camel case.
  });

</script>


<script>

async function initMap() {
  let map;
  
  const initialPosition = { lat: 61.2176, lng: -149.8997 };
  const markerPositions = [
    { lat: 60.3886, lng: -144.9608 }, // Copper River
    { lat: 60.5439, lng: -151.2786 }, // Kenai River
    { lat: 58.7994, lng: -158.6325 }, // Nushagak River
    { lat: 58.7186, lng: -157.0656 }, // Naknek River
    // Add more marker positions here
  ];

  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

  map = new Map(document.getElementById("map"), {
    center: initialPosition,
    zoom: 4,
    mapId: "Salmon Finder",
  });

  // Create markers for each position
  markerPositions.forEach(position => {
    new AdvancedMarkerElement({
      map: map,
      position: position,
      title: "Marker",
    });
  });


    // Add click event listener to each marker (This is the stuff that Chat GPT recommended, but it broke when I tried it)
  @*  marker.addListener("click", () => {
      getRiverName(position);
    });
  });

  map.addListener("click", (e) => {
    getRiverName(e.latLng);
  });
} *@

// In this modified version, after creating each marker, I've attached a click event listener to it. 
// When a marker is clicked, the getRiverName function will be called with the marker's position as an argument.
// Now, when you click on any of the markers on the map, it will trigger the getRiverName function with the corresponding marker's position.

  map.addListener("click", (e) => {
    getRiverName(e.latLng);
  });
}

function getRiverName(latLng, map) {

    @* var map = new google.maps.Map(document.getElementById('map'), {

        center: latLng,
        

    }); *@

    var request = {

        location: latLng,

        radius: '1500', // Search within 1000 meters.

        keyword: 'river'

    };

 

    var service = new google.maps.places.PlacesService(map);

    service.nearbySearch(request, function(results, status) {

        if (status === google.maps.places.PlacesServiceStatus.OK) {
            
            if (results[0].name === "Copper River") {
              window.location.href = "/copper river";
            }

        }

    });

}

initMap(); 

</script>